// schemas/course.js
export default {
  name: 'course',
  title: 'Course',
  type: 'document',
  fields: [
    {
      name: 'title',
      title: 'Course Title',
      type: 'string',
      description: 'The main title of the course.',
      // validation: Rule => Rule.required().min(5).max(120), // Exemplo de validação
    },
    {
      name: 'slug',
      title: 'Course Slug',
      type: 'slug',
      options: {
        source: 'title',
        // maxLength: 96, // Sugestão para um maximo para URLs
      },
      description: 'A unique, URL-friendly identifier for the course.'
    },
    {
      name: 'description',
      title: 'Short Description',
      type: 'text',
      // validation: Rule => Rule.required().min(20).max(500), // Exemplo de validação
      description: 'A brief overview of what the course covers.'
    },
    {
      name: 'image',
      title: 'Course Image',
      type: 'image',
      options: {
        hotspot: true, // Allows selecting focal point for image crops
      },
      description: 'A compelling image to represent the course.'
    },
    {
      name: 'category',
      title: 'Category',
      type: 'reference',
      to: [{ type: 'courseCategory' }],
      // validation: Rule => Rule.required(), // Manter esta validação é importante, já que é uma referência
      description: 'The primary category this course belongs to. Selected from predefined categories.'
    },
    {
      name: 'subCategory',
      title: 'Subcategory',
      type: 'reference',
      to: [{ type: 'courseSubCategory' }],
      // validation: Rule => Rule.required(), // Você pode decidir tornar obrigatório para v0.1 ou depois
      description: 'The specific subcategory of the course. Selected from predefined subcategories.'
    },
    {
      name: 'courseTags',
      title: 'Tags',
      type: 'array',
      of: [{ type: 'reference', to: [{ type: 'courseTag' }] }], 
      description: 'Relevant tags for the course to aid discovery and filtering.'
    },
    {
      name: 'level',
      title: 'Difficulty Level',
      type: 'string',
      options: {
        list: [
          { title: 'Beginner', value: 'beginner' },
          { title: 'Intermediate', value: 'intermediate' },
          { title: 'Advanced', value: 'advanced' },
        ],
        layout: 'radio',
      },
      initialValue: 'beginner',
      // validation: Rule => Rule.required(), 
      description: 'The recommended difficulty level for this course.'
    },
    {
      name: 'estimatedDuration',
      title: 'Estimated Duration',
      type: 'number', // Ex: "2 hours", "30 minutes", "1 day"
      description: 'The estimated time to complete the course.'
    },
    {
      name: 'status',
      title: 'Status',
      type: 'string',
      options: {
        list: [
          { title: 'Published', value: 'published' },
          { title: 'Draft', value: 'draft' },
          { title: 'Pending', value: 'pending' },
          { title: 'Private', value: 'private' },
          { title: 'Archived', value: 'archived' },
        ],
        layout: 'radio',
      },
      initialValue: 'published',
      description: 'Current publication status of the course, similar to WordPress posts.'
    },
    {
      name: 'price',
      title: 'Price (BRL)',
      type: 'number',
      description: 'Price of the course in BRL. Set to 0 for free courses.',
      initialValue: 0,
      // validation: Rule => Rule.min(0), // Preço não pode ser negativo
    },
    {
      name: 'isProContent',
      title: 'Is Pro Content?',
      type: 'boolean',
      initialValue: false,
      description: 'If true, this course is only available to Pro plan members.'
    },
    {
      name: 'creator',
      title: 'Creator',
      type: 'reference',
      to: [{ type: 'member' }],
      // validation: Rule => Rule.required(), // Para garantir que todo curso tenha um criador
      description: 'The member who initiated the creation of this course (often generated by AI).'
    },
    {
      name: 'lessons',
      title: 'Lessons',
      type: 'array',
      of: [
        {
          type: 'reference',
          to: [{ type: 'lesson' }],
        }
      ],
      description: 'The sequence of lessons that make up this course.'
    },
    // --- Campos para Rastreamento da Geração via IA ---
    {
      name: 'aiGenerationPrompt',
      title: 'AI Generation Prompt',
      type: 'text',
      description: 'The prompt used to generate this course content via AI. For internal tracking and potential regeneration.',
    },
    {
      name: 'aiModelUsed',
      title: 'AI Model Used',
      type: 'string',
      description: 'The specific AI model (e.g., gemini-1.5-flash, gpt-4o) used for content generation.',
      readOnly: true,
    },
    {
      name: 'generatedAt',
      title: 'Generated At',
      type: 'datetime',
      options: {
        dateFormat: 'YYYY-MM-DD',
        timeFormat: 'HH:mm',
        calendarTodayLabel: 'Today'
      },
      readOnly: true,
      description: 'Timestamp of when the course content was initially generated by AI.'
    },
    {
      name: 'lastGenerationRevision',
      title: 'Last Generation Revision',
      type: 'datetime',
      options: {
        dateFormat: 'YYYY-MM-DD',
        timeFormat: 'HH:mm',
        calendarTodayLabel: 'Today'
      },
      readOnly: true,
      description: 'Timestamp of the last time the course content was regenerated or revised by AI.'
    },
  ],
  preview: {
    select: {
      title: 'title',
      categoryTitle: 'category.title',
      subCategoryTitle: 'subCategory.title',
      // ADICIONE ISTO para que as tags apareçam no preview do Studio, se desejar
      courseTags: 'courseTags',
      media: 'image',
      status: 'status',
      creatorName: 'creator.name',
    },
    prepare(selection) {
      const { title, categoryTitle, subCategoryTitle, courseTags, media, status, creatorName } = selection;
      const subtitleParts = [];
      if (categoryTitle) subtitleParts.push(categoryTitle);
      if (subCategoryTitle) subtitleParts.push(subCategoryTitle);
      if (courseTags && courseTags.length > 0) {
        // Você precisaria de um GROQ query para pegar os títulos das tags aqui para o preview
        // Por simplicidade, podemos mostrar o número de tags ou "Com Tags"
        subtitleParts.push(`Tags: ${courseTags.length}`);
      }
      if (status) subtitleParts.push(`(${status})`);
      if (creatorName) subtitleParts.push(`By ${creatorName}`);

      return {
        title: title || 'New Course (Title Pending)',
        subtitle: subtitleParts.join(' - '),
        media: media,
      };
    },
  },
};